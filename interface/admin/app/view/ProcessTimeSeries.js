/*
 * File: app/view/ProcessTimeSeries.js
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('istsos.view.ProcessTimeSeries', {
    extend: 'istsos.view.ui.ProcessTimeSeries',
    alias: 'widget.viewerpanel1',
    mixins: {
        dataAccess: 'istsos.view.ProcedureChart'
    },
    initComponent: function() {
        var me = this;
        me.callParent(arguments);

        this.pchoose = Ext.getCmp('pchoose');
        this.chartpanel = Ext.getCmp('chartpanel');
        this.serieschartpanel = Ext.getCmp('serieschartpanel');

        // this.chartpanel1=Ext.getCmp('chartpanelmethod');
        // timeSeriesGraph=Ext.getCmp('timeSeriesGraph');
        

        var methodpanel=Ext.getCmp('methodstabs');
        var methodserch=Ext.getCmp('buttonExecute');
        var downloadResult=Ext.getCmp('buttonSave');
        
        // methodserch.disable();
        // methodpanel.disable();
        downloadResult.disable();
        var rst_data, rst_header;

        this.pchoose.on("procedureAdded",function(procedure) {
            this.chartpanel.addProcedure(procedure);
            // methodserch.enable();
            // methodpanel.enable();
        },this);
        
        this.pchoose.on("procedureRemoved",function(procedure) {
            this.chartpanel.removeProcedure(procedure);
        },this);
        
        Ext.getCmp("methodsCombox").select(0);
        Ext.getCmp("methodsCombox").on("select",function(combo, records, eOpts){

            var value = combo.getValue();
            // console.log(value);
            // console.log('in the combox');

            var digital_filter = Ext.getCmp('digitalPanel');
            var exeedance = Ext.getCmp('exeedancePanel');
            var resample = Ext.getCmp('resamplePanel');
            var integrate = Ext.getCmp('integratePanel');
            var regularization = Ext.getCmp('regularizationPanel');
            var fill = Ext.getCmp('fillPanel1');
            var dataValues = Ext.getCmp('DataValuesPanel');
            var quality = Ext.getCmp('qualityPanel');
            var statistics = Ext.getCmp('StataticsPanel');
            var hydro_indices = Ext.getCmp('HydroIndicesPanel');
            var hydro_events = Ext.getCmp('HydroEventsPanel');
            var hargreaves = Ext.getCmp('hargreavesPanel');
            var compare = Ext.getCmp('ComparePanel');
            var subtract = Ext.getCmp('SubtractPanel');
            var hydro_separation = Ext.getCmp('HydroSeparationPanel');
            switch (value) {
                case 0:
                    digital_filter.setVisible(true);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                  break;
                case 1:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(true);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                  break;
                case 2:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(true);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                  break;
                case 3:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(true);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                  break;
                case 4:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(true);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                  break;
                case 5:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(true);
                    hydro_separation.setVisible(false);
                    break;
                case 6:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(true);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 7:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(true);
                    break;
                case 8:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(true);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 9:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(true);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 10:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(true);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 11:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(true);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 12:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(true);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 13:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(true);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(false);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
                case 14:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                    fill.setVisible(false);
                    dataValues.setVisible(false);
                    quality.setVisible(false);
                    statistics.setVisible(false);
                    hydro_indices.setVisible(false);
                    hydro_events.setVisible(false);
                    hargreaves.setVisible(true);
                    compare.setVisible(false);
                    subtract.setVisible(false);
                    hydro_separation.setVisible(false);
                    break;
            }
        });

        Ext.getCmp("buttonExecute").on("click",function(btn, e, eOpts){

            var methods=Ext.getCmp("methodsCombox").getValue();

            var textHistory=Ext.getCmp('textAreaHistory');
            var textViewer=Ext.getCmp('ResultViewer');
            var Resulttext=Ext.getCmp('Resulttextpanel');
            var chartPlot=Ext.getCmp('chartSeries');
            var ExeeTextView=Ext.getCmp('ResultViewer');


            downloadResult.enable();

            if (methods == 0)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                //Taking Input
                var digLow= Ext.getCmp("digLowcutOff").getValue();
                var digHigh= Ext.getCmp("digHigcutOff").getValue();
                var digOrder= Ext.getCmp("digOrder").getValue();
                var digiType= Ext.getCmp("digiType").getValue();
                var exeeResult="";

                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Digital Filter Params:  Integrate Low cut-off: "+digLow+"  High cut-off: "+digHigh+"  Order: "+digOrder+"  Type: "+digiType);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/digitalfilter', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "dlow":digLow,
                        "dhigh":digHigh,
                        "dorder":digOrder,
                        "dfilter":digiType,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // for (var i = 0; i < json1["data"].length; i++) {
                        //         frequency=json1["data"][i][frequency];
                        //         percentage=json1["data"][i][percentage];
                        //         value=json1["data"][i][value];
                        //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                        // }
                        //         // for(var i=0;i<test.length;i++){
                        //         // }
                        // ExeeTextView.setValue(exeeResult);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 1)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var frequency;
                                var percentage;
                                var value;

                //Taking Input
                var exceeValues= Ext.getCmp("exeeValues").getValue();
                var exceeProbability= Ext.getCmp("exeeProbability").getValue();
                var exceeTime= Ext.getCmp("exeeTime").getValue();
                var exceeUnder= Ext.getCmp("exeeUnder").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);

                textHistory.setValue("Filter Exeedance Params:  Exeedance Values: "+exceeValues+"  Exeedance Probability: "+exceeProbability+"  Exeedance Time: "+exceeTime+"  Exeedance Under: "+exceeUnder);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/exceedance', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "exceevalues":exceeValues,
                        "exceeperc":exceeProbability,
                        "etu":exceeTime,
                        "exceeunder":exceeUnder,
                        "index1": resdata1,
                        "values1": resdata2
                    },
                    success: function(response){
                        // var json1 = Ext.decode(response.responseText);
                        // console.log(json1);
                        // for (var i = 0; i < json1["data"].length; i++) {
                        //         frequency=json1["data"][i][frequency];
                        //         percentage=json1["data"][i][percentage];
                        //         value=json1["data"][i][value];
                        //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                        // }
                                // for(var i=0;i<test.length;i++){
                                // }
                        ExeeTextView.setValue(response.responseText);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
                

            }
            if (methods == 2)
            {
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                // console.log(resdata1);
                // console.log(resdata2);
                var frequency= Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods= Ext.getCmp("comboxSmapling").getValue();
                var fillCombox= Ext.getCmp("comboxFill").getValue();
                var Limit= Ext.getCmp("comboxLimit").getValue();
                var Quality= Ext.getCmp("comboxHowquality").getValue();
                var textHistory=Ext.getCmp('textAreaHistory');
                // istsos.view.ProcessTimeSeries.dataAccess();
                
                Resulttext.setVisible(false);
                chartPlot.setVisible(true);

                console.log(frequency+"  "+timeSeriesMethods+"   "+fillCombox+"    "+Limit+" "+Quality);
                textHistory.setValue("frequency: "+frequency+"  How: "+timeSeriesMethods+"  fill: "+fillCombox+"  Limit: "+Limit+"  Quality: "+Quality);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/resample', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "freq":frequency,
                        "sampling":timeSeriesMethods,
                        "fill":fillCombox,
                        "limit":Limit,
                        "Quality":Quality,
                        "index1": resdata1,
                        "values1": resdata2
                        // "seriesdata":data
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        // for (var i = 0; i < json1.data.length; i++) {
                        // }
                                console.log(json1['data']);
                                // console.log(JSON.parse(json1['data']));
                                // var test=JSON.parse(json1.data);
                                // for(var i=0;i<json1['data'].length;i++){
                                //     console.log(json1['data'][i][0]+"   "+json1['data'][i][1])
                                // }
                                


                                // Mask the container with loading message
                                Ext.get('chartSeries').mask("Initializing chart..");
                                
                                // var x=Object.keys(test['value']);
                                // var y=Object.values(test['value']);
                                // console.log(x,y);
                                this.chartdata = [];
                                for (var i = 0; i < json1['data'].length; i++) {
                                    var rec = [];
                                    rec.push(parseInt(json1['data'][i][0]));
                                    var vals = json1['data'][i][1];
                                    rec = rec.concat(vals);
                                    this.chartdata.push(rec);
                                }
                                console.log(this.chartdata);
                                this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }
            if (methods == 3)
            {
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                //Taking Input
                var intgTimeUnit= Ext.getCmp("timeUnitsCombox").getValue();
                var intgHow= Ext.getCmp("comboxIntegrateFlow").getValue();
                var intgFactor= Ext.getCmp("integratefactor").getValue();

                var intgUseTime= Ext.getCmp("checkUsetime").getValue();
                var intgTimePanel= Ext.getCmp("UseTimePanel");
                // intgTimePanel.disable();
                // if(intgUseTime==){
                //     intgTimePanel.enable()
                // }
                
                // var intgFlow= Ext.getCmp("comboxIntegrateFlow").getValue();
                var intgDateAsText= Ext.getCmp("integratedateastext").getValue();
                var intgBegin= Ext.getCmp("edittextintegrateBegin").getValue();
                var intgEnd= Ext.getCmp("edittextintegrateEnd").getValue();
                var intgTimeZone= Ext.getCmp("integrateTimezone").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);
                textHistory.setValue("Filter Integrate Params:  Integrate Time Unit: "+intgTimeUnit+"  Use Time: "+intgUseTime+"  Begin Time: "+intgBegin+"  End Time: "+intgEnd+"  TimeZone: "+intgTimeZone+"  How: "+intgHow+"  Factor: "+intgFactor+"  DateAsText: "+intgDateAsText);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "itimeunit":intgTimeUnit,
                        "ihow":intgHow,
                        "ifactor":intgFactor,
                        "iusetime":intgUseTime,
                        "ibegin":intgBegin,
                        "iend":intgEnd,
                        "itimezone":intgTimeZone,
                        "idataastext":intgDateAsText,
                    },
                    success: function(response){
                        // var json1 = Ext.decode(response.responseText);
                        // console.log(json1);
                        console.log(response.responseText);
                        ExeeTextView.setValue(response.responseText);
                        // ExeeTextView.setValue("  To:  "+json1['data']['to']+"  from: "+json1['data']['from']+"  value:  "+json1['data']['value']);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 4)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);
                textHistory.setValue("Filter Fill Params:  filling no data method: "+fillMethod+"  consucutive no data allowed: "+fillConsucutive);

                // Ext.Ajax.request({
                //     url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                //     scope: this,
                //     method:"POST",
                //     jsonData:{
                //         "exceevalues":exceeValues,
                //         "exceeperc":exceeProbability,
                //         "etu":exceeTime,
                //         "exceeunder":exceeUnder,
                //         "index1": resdata1,
                //         "values1": resdata2
                //     },
                //     success: function(response){
                //         var json1 = Ext.decode(response.responseText);
                //         console.log(json1);
                //         // for (var i = 0; i < json1["data"].length; i++) {
                //         //         frequency=json1["data"][i][frequency];
                //         //         percentage=json1["data"][i][percentage];
                //         //         value=json1["data"][i][value];
                //         //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                //         // }
                //         //         // for(var i=0;i<test.length;i++){
                //         //         // }
                //         // ExeeTextView.setValue(exeeResult);
                //     },
                //     failure: function (response) {
                //         var jsonResp = Ext.util.JSON.decode(response.responseText);
                //         Ext.Msg.alert("Error",jsonResp.error);
                //     }
                // });
            }

            if (methods == 5)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);
                textHistory.setValue("Filter Fill Params:  filling no data method: "+fillMethod+"  consucutive no data allowed: "+fillConsucutive);

                // Ext.Ajax.request({
                //     url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                //     scope: this,
                //     method:"POST",
                //     jsonData:{
                //         "exceevalues":exceeValues,
                //         "exceeperc":exceeProbability,
                //         "etu":exceeTime,
                //         "exceeunder":exceeUnder,
                //         "index1": resdata1,
                //         "values1": resdata2
                //     },
                //     success: function(response){
                //         var json1 = Ext.decode(response.responseText);
                //         console.log(json1);
                //         // for (var i = 0; i < json1["data"].length; i++) {
                //         //         frequency=json1["data"][i][frequency];
                //         //         percentage=json1["data"][i][percentage];
                //         //         value=json1["data"][i][value];
                //         //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                //         // }
                //         //         // for(var i=0;i<test.length;i++){
                //         //         // }
                //         // ExeeTextView.setValue(exeeResult);
                //     },
                //     failure: function (response) {
                //         var jsonResp = Ext.util.JSON.decode(response.responseText);
                //         Ext.Msg.alert("Error",jsonResp.error);
                //     }
                // });
            }

            if(methods==6){
                // console.log('BUTTON EXECUTE CLICKED'); 
                var frequency= Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods= Ext.getCmp("comboxSmapling").getValue();
                var fillCombox= Ext.getCmp("comboxFill").getValue();
                var Limit= Ext.getCmp("comboxLimit").getValue();
                var Quality= Ext.getCmp("comboxHowquality").getValue();
                    Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/regularization', wa.url),
                    scope: this,
                    method: "GET",
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log('REQUEST OF DATA FROM to TO ALL PROPERTY');
                        console.log('this success response');
                        var text1 = response.responseText;
                        console.log(json1);
                    },
                    failure: function (response) {
                        console.log('this failure response');
                      // var jsonResp = Ext.util.JSON.decode(response.responseText);
                      // Ext.Msg.alert("Error",jsonResp.error);
                        var text2 = response.responseText;
                        console.log(text2);
                        }
                    });
            }

            if (methods == 7)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                //Taking Input
                var hsmode= Ext.getCmp("HSmode").getValue();
                var hsalpha= Ext.getCmp("HSalpha").getValue();
                var bsalpha= Ext.getCmp("bsalpha").getValue();
                var exeeResult="";

                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Hydro Separation Params:  mode: "+hsmode+"  alpha: "+hsalpha+"  bsalpha"+bsalpha);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/hydrosaparation', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        'hsmode':hsmode,
                        'hsalpha':hsalpha,
                        'hsbfl':bsalpha,
                        'index1': resdata1,
                        'values1': resdata2,
                        'qual': resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // console.log(response.responseText);

                        // Ext.get('chartSeries').mask("Initializing chart..");
                        // this.chartdata = [];
                        // for (var i = 0; i < json1['data'].length; i++) {
                        //     var rec = [];
                        //     rec.push(parseInt(json1['data'][i][0]));
                        //     var vals = json1['data'][i][1];
                        //     rec = rec.concat(vals);
                        //     this.chartdata.push(rec);
                        // }
                        // console.log(this.chartdata);
                        // this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 8)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);
                textHistory.setValue("Filter Fill Params:  filling no data method: "+fillMethod+"  consucutive no data allowed: "+fillConsucutive);

                // Ext.Ajax.request({
                //     url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                //     scope: this,
                //     method:"POST",
                //     jsonData:{
                //         "exceevalues":exceeValues,
                //         "exceeperc":exceeProbability,
                //         "etu":exceeTime,
                //         "exceeunder":exceeUnder,
                //         "index1": resdata1,
                //         "values1": resdata2
                //     },
                //     success: function(response){
                //         var json1 = Ext.decode(response.responseText);
                //         console.log(json1);
                //         // for (var i = 0; i < json1["data"].length; i++) {
                //         //         frequency=json1["data"][i][frequency];
                //         //         percentage=json1["data"][i][percentage];
                //         //         value=json1["data"][i][value];
                //         //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                //         // }
                //         //         // for(var i=0;i<test.length;i++){
                //         //         // }
                //         // ExeeTextView.setValue(exeeResult);
                //     },
                //     failure: function (response) {
                //         var jsonResp = Ext.util.JSON.decode(response.responseText);
                //         Ext.Msg.alert("Error",jsonResp.error);
                //     }
                // });
            }

            if (methods == 9)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                Resulttext.setVisible(true);
                chartPlot.setVisible(false);
                textHistory.setValue("Filter Fill Params:  filling no data method: "+fillMethod+"  consucutive no data allowed: "+fillConsucutive);

                // Ext.Ajax.request({
                //     url: Ext.String.format('{0}/istsos/operations/oat/intgrate', wa.url),
                //     scope: this,
                //     method:"POST",
                //     jsonData:{
                //         "exceevalues":exceeValues,
                //         "exceeperc":exceeProbability,
                //         "etu":exceeTime,
                //         "exceeunder":exceeUnder,
                //         "index1": resdata1,
                //         "values1": resdata2
                //     },
                //     success: function(response){
                //         var json1 = Ext.decode(response.responseText);
                //         console.log(json1);
                //         // for (var i = 0; i < json1["data"].length; i++) {
                //         //         frequency=json1["data"][i][frequency];
                //         //         percentage=json1["data"][i][percentage];
                //         //         value=json1["data"][i][value];
                //         //         exeeResult=+"\nfrequency : "+frequency+" percentage : "+percentage+" value : "+value;
                //         // }
                //         //         // for(var i=0;i<test.length;i++){
                //         //         // }
                //         // ExeeTextView.setValue(exeeResult);
                //     },
                //     failure: function (response) {
                //         var jsonResp = Ext.util.JSON.decode(response.responseText);
                //         Ext.Msg.alert("Error",jsonResp.error);
                //     }
                // });
            }

            if (methods == 10)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                //Taking Input
                var dataSta= Ext.getCmp("dataSta").getValue();
                var quaSta= Ext.getCmp("quaSta").getValue();
                var timeSta= Ext.getCmp("timeUseSta").getValue();
                var beginSta= Ext.getCmp("beginSta").getValue();
                var endSta= Ext.getCmp("endSta").getValue();
                var timezoneSta= Ext.getCmp("timezoneSta").getValue();

                var exeeResult="";

                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Statistics Params: data: "+dataSta+"  quality: "+quaSta+"  time: "+timeSta+"  beginSta: "+beginSta+"  end: "+endSta+"  timezone: "+timezoneSta);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/statistics', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "dataSta":dataSta,
                        "quaSta":quaSta,
                        "timeSta":timeSta,
                        "beginSta":beginSta,
                        "endSta": endSta,
                        "timezoneSta": timezoneSta,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual": resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        rst_header = 'Statistics Params\ncount,std,min,max,50%,25%,75%,mean\n';
                        // ExeeTextView.setValue(strg); 
                        var initialData;
                        var data;
                        if(dataSta && quaSta){
                            initialData = [
                               { table: "Quality", rows: [
                                { table: "count", row: json1['data']['quality']['count'] },
                                  { table: "std", row: json1['data']['quality']['std'] },
                                  { table: "mean", row: json1['data']['quality']['mean'] },
                                  { table: "max", row: json1['data']['quality']['max'] },
                                  { table: "min", row: json1['data']['quality']['min'] },
                                  { table: "25%", row: json1['data']['quality']['25%'] },
                                  { table: "50%", row: json1['data']['quality']['50%'] },
                                  { table: "75%", row: json1['data']['quality']['75%'] }
                                ]
                              },
                              { table: "Data", rows: [
                                  { table: "Count", row: json1['data']['data']['count'] },
                                  { table: "std", row: json1['data']['data']['std'] },
                                  { table: "mean", row: json1['data']['data']['mean'] },
                                  { table: "max", row: json1['data']['data']['max'] },
                                  { table: "min", row: json1['data']['data']['min'] },
                                  { table: "25%", row: json1['data']['data']['25%'] },
                                  { table: "50%", row: json1['data']['data']['50%'] },
                                  { table: "75%", row: json1['data']['data']['75%'] }
                                ]
                              }
                            ]
                            rst_data=json1['data']['data'];    
                        }else{
                            initialData = [
                              { table: "Data", rows: [
                                  { table: "Count", row: json1['data']['count'] },
                                  { table: "std", row: json1['data']['std'] },
                                  { table: "mean", row: json1['data']['mean'] },
                                  { table: "max", row: json1['data']['max'] },
                                  { table: "min", row: json1['data']['min'] },
                                  { table: "25%", row: json1['data']['25%'] },
                                  { table: "50%", row: json1['data']['50%'] },
                                  { table: "75%", row: json1['data']['75%'] }
                                ]
                              }
                            ]
                            rst_data=json1['data'];
                        }
                        data = JSON.parse(JSON.stringify(initialData));
                        this.showResultGrid(data);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 11)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                //Taking Input
                var fillMethod= Ext.getCmp("fillMethod").getValue();
                var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();

                var exeeResult="";

                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Fill Params:  filling no data method: "+fillMethod+"  consucutive no data allowed: "+fillConsucutive);

                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/fill', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "fillMethod1":fillMethod,
                        "fillConsucutive1":fillConsucutive,
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual": resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // console.log(response.responseText);

                        Ext.get('chartSeries').mask("Initializing chart..");
                        this.chartdata = [];
                        for (var i = 0; i < json1['data'].length; i++) {
                            var rec = [];
                            rec.push(parseInt(json1['data'][i][0]));
                            var vals = json1['data'][i][1];
                            rec = rec.concat(vals);
                            this.chartdata.push(rec);
                        }
                        console.log(this.chartdata);
                        this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 12)
            {
                // Data 
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                // console.log(resdata);
                // console.log(resdata3);
                //Taking Input
                var DataValue= Ext.getCmp("Qvalue").getValue();
                var DataStat= Ext.getCmp("Qstat").getValue();
                var DataTime= Ext.getCmp("Qtime").getValue();
                var DataBegin= Ext.getCmp("Qbegin").getValue();
                var DataEnd= Ext.getCmp("Qend").getValue();
                var DataTimezone= Ext.getCmp("Qtimezone").getValue();
                var DataLow= Ext.getCmp("Qlow").getValue();
                var DataHigh= Ext.getCmp("Qhigh").getValue();


                var exeeResult="";
                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Quality Params:  Values "+DataValue+"  Statistics:  "+DataStat+" Time: "+DataTime+" Begin: "+DataBegin+" End: "+DataEnd+" TimeZone: "+DataTimezone+" low: "+DataLow+" High: "+DataHigh);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/qualitymethod', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "qvalue":DataValue,
                        "qstat":DataStat,
                        "qtime":DataTime,
                        "qbegin":DataBegin,
                        "qend":DataEnd,
                        "qtimezone":DataTimezone,
                        "qlow":DataLow,
                        "qhigh":DataHigh
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // console.log(response.responseText);
                        // Mask the container with loading message
                        Ext.get('chartSeries').mask("Initializing chart..");
                        
                        this.chartdata = [];
                        for (var i = 0; i < json1['data'].length; i++) {
                            var rec = [];
                            rec.push(parseInt(json1['data'][i][0]));
                            var vals = json1['data'][i][1];
                            rec = rec.concat(vals);
                            this.chartdata.push(rec);
                        }
                        console.log(this.chartdata);
                        this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 13)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                // console.log(resdata);
                // console.log(resdata3);
                //Taking Input
                var DataValue= Ext.getCmp("dvvalue").getValue();
                var DataTime= Ext.getCmp("dvtime").getValue();
                var DataBegin= Ext.getCmp("dvbegin").getValue();
                var DataEnd= Ext.getCmp("dvend").getValue();
                var DataTimezone= Ext.getCmp("dvtimezone").getValue();
                var DataLow= Ext.getCmp("dvlow").getValue();
                var DataHigh= Ext.getCmp("dvhigh").getValue();


                var exeeResult="";
                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Data Value Params:  Values "+DataValue+" Time: "+DataTime+" Begin: "+DataBegin+" End: "+DataEnd+" TimeZone: "+DataTimezone+" low: "+DataLow+" High: "+DataHigh);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/datavalue', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3,
                        "dvvalue":DataValue,
                        "dvtime":DataTime,
                        "dvbegin":DataBegin,
                        "dvend":DataEnd,
                        "dvtimezone":DataTimezone,
                        "dvlow":DataLow,
                        "dvhigh":DataHigh
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // console.log(response.responseText);
                        // Mask the container with loading message
                        Ext.get('chartSeries').mask("Initializing chart..");
                        
                        this.chartdata = [];
                        for (var i = 0; i < json1['data'].length; i++) {
                            var rec = [];
                            rec.push(parseInt(json1['data'][i][0]));
                            var vals = json1['data'][i][1];
                            rec = rec.concat(vals);
                            this.chartdata.push(rec);
                        }
                        console.log(this.chartdata);
                        this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

            if (methods == 14)
            {
                // Data
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                var resdata3=new Array();
                for(var i=0;i<resdata1.length;i++){
                    resdata3[i]=200;
                }

                // console.log(resdata);
                // console.log(resdata3);
                //Taking Input
                // var fillMethod= Ext.getCmp("fillMethod").getValue();
                // var fillConsucutive= Ext.getCmp("fillConsucutive").getValue();
                var exeeResult="";
                Resulttext.setVisible(false);
                chartPlot.setVisible(true);
                textHistory.setValue("Filter Hargreaves Params:  Hargreaves ");
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/hargreaves', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "index1": resdata1,
                        "values1": resdata2,
                        "qual":resdata3
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log(json1);
                        // console.log(response.responseText);
                        // Mask the container with loading message
                        Ext.get('chartSeries').mask("Initializing chart..");
                        
                        this.chartdata = [];
                        for (var i = 0; i < json1['data'].length; i++) {
                            var rec = [];
                            rec.push(parseInt(json1['data'][i][0]));
                            var vals = json1['data'][i][1];
                            rec = rec.concat(vals);
                            this.chartdata.push(rec);
                        }
                        console.log(this.chartdata);
                        this.rederChart1(this.chartdata);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }

        },this);

        Ext.getCmp("buttonSave").on("click",function(btn, e, eOpts){
            console.log('BUTTON SAVE CLICKED');
            this.download_csv(rst_data,rst_header);
        },this);
        Ext.getCmp("checkboxOverwrite").on("click",function(btn, e, eOpts){
            console.log('checkboxOverwrite');
        },this);

        /*Ext.getCmp('chartpanel').on("underlayCallback",function(panel, e, x, pts) {
            console.log("underlayCallback:");
            console.dir(arguments);
        });*/
    },
    rederChart1: function(chartdata){
            this.chartdata=chartdata;
            // this.obsprop = Ext.getCmp("oeCbObservedProperty").getValue();
            // var procs = [];
            // get the json rapresentation of the tree menu of procedures
            //var checked = Ext.getCmp('proceduresTree').getValues();
            var visibility = []; // Initialize the chart series visibility

            this.labels = ["isodate"];
            this.colors = [];
            var template = [];

            var valueFormatter = {

            }

            var initChart = true;
            if (initChart) {
                this.chart = new Dygraph(
                    document.getElementById("chartSeries-body"),
                    this.chartdata,
                    {
                        strokeWidth: 2,
                        digitsAfterDecimal: 6,
                        connectSeparatedPoints: true,
                        //visibility: visibility,
                        legend: 'always',
                        showRangeSelector: true,
                        showRoller: true,
                        rangeSelectorHeight: 30,
                        rangeSelectorPlotStrokeColor: 'black',
                        rangeSelectorPlotFillColor: 'green',
                        labelsDivStyles: {
                            'padding': '4px',
                            'border': '1px solid black',
                            'borderRadius': '3px',
                            'boxShadow': '4px 4px 4px #888',
                            'right': '10px'
                        },
                        labelsDivWidth: "100%",
                        axisLineColor: 'green',
                        axisLabelFontSize: 12,
                        axisLabelWidth: 150,
                        xAxisLabelWidth: 150,
                        highlightCircleSize: 4,
                        axes: Ext.apply({
                            x: {
                                valueFormatter: function(ms) {
                                    return istsos.utils.micro2iso(ms,istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue()));
                                },
                                axisLabelFormatter: function(ms, gran, b, chart){

                                    // Get unix time in seconds
                                    var unix = parseInt(ms/1000000);
                                    // Extract microseconds only
                                    var micro = ms-(unix*1000000);
                                    // Date object without considering microseconds
                                    var date = Ext.Date.parse(unix,'U');

                                    var range = chart.xAxisRange();
                                    var delta = range[1]-range[0];

                                    var clip = function(m){
                                        return (parseFloat('0.'+m)+"").substring(1);
                                    }
                                    if (delta<500000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==200000 || micro==400000 || micro==600000 || micro==800000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if (delta<1000000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==500000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if(delta<1000000*60) { // less the a minute
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i:s')+clip(micro);
                                        }
                                    }else if(delta<1000000*60*60) { // less the an hour
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d') + "T" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24*4) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12) {
                                            return Ext.Date.format(date,'Y-m-d') + "<br>" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else  { // less the a day
                                        return Ext.Date.format(date,'Y-m-d');
                                    }

                                }
                            }
                        },valueFormatter),
                        clickCallback: function(e, x, pts) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            // Series selectd
                            if (e.shiftKey && chartpanel.lastClick) {
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("seriesSelected", this, e, x, this.lastClick, pts);
                                }, chartpanel, [e, x, pts]);

                            }else{ // Single point selected
                                chartpanel.lastClick = x;
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("clickCallback", this, e, x, pts);
                                }, chartpanel, [e, x, pts]);
                            }

                        },
                        pointClickCallback: function(e, p) {

                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(e, p){
                                this.fireEvent("clickCallback", this, e, p['xval']);
                            }, chartpanel, [e, p]);
                        },
                        underlayCallback: function(canvas, area, g) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(canvas, area, g){
                                this.fireEvent("underlayCallback", this, canvas, area, g);
                            }, chartpanel, [canvas, area, g]);
                        }
                    }
                    );
            }else if (!Ext.isEmpty(this.chart)) {
                this.chart.updateOptions({
                    file: this.chartdata,
                    visibility: visibility,
                    labels: this.labels
                });
            }
            Ext.get('chartSeries-body').removeCls("viewerChart");
            Ext.get('chartSeries').unmask();
    },
    showResultGrid: function(data) {    
                        // title div with label and button
                        var header2 = d3.select("div").attr("class", "well");
                        // container for array of tables
                        var tableDiv = d3.select("#chartSeries-body");
                          for(var i=0;i<3;i++){
                                    // update(data);
                                              // select all divs in the table div, and then apply new data 
                                      // after .data() is executed below, divs becomes a d3 update selection
                                  var divs = tableDiv.selectAll("div").data(data,function(data) { return data.table }) ;
                                  // divs.exit().remove();

                                  var divsEnter = divs.enter().append("div").attr("id", function(d) { return d.table + "Div"; }).attr("class", "well");
                                  divsEnter.append("h5").text(function(d) { return d.table; });
                                  // add table in new div(s)
                                  var tableEnter = divsEnter.append("table")
                                      .attr("id", function(d) { return d.table })
                                      .attr("class", "table table-condensed table-striped table-bordered")
                                  // append table head in new table(s)
                                  tableEnter.append("thead").append("tr").selectAll("th").data(["     Stat. Prams      ", "      Values   "]).enter().append("th")
                                      .text(function(d) { return d; });
                                  // append table body in new table(s)
                                  tableEnter.append("tbody");
                                  // select all tr elements in the divs update selection
                                  var tr = divs.select("table").select("tbody").selectAll("tr")
                                            .data(
                                        function(d) { return d.rows; }, // return inherited data item
                                        function(d) { return d.row }    // "key" function to disable default by-index evaluation
                                      ); 
                                  // tr.exit().remove();
                                  tr.enter().append("tr");
                                  // bind data to table cells
                                  var td = tr.selectAll("td")
                                      // after the .data() is executed below, the td becomes a d3 update selection
                                      .data(function(d) { return d3.values(d); });   // return inherited data item
                                  // use the enter method to add td elements 
                                  td.enter().append("td")               // add the table cell
                                      .text(function(d) { return d; })  // add text to the table cell        
                          }
                    // Ext.get('chartSeries-body').removeCls("viewerChart");
                    // Ext.get('chartSeries').unmask();

    },
    ConvertToCSV: function(objArray) {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
        var str = '';
        for (var i = 0; i < array.length; i++) {
            var line = '';
            for (var index in array[i]) {
                if (line != '') line += ','
                line += array[i][index];
            }
            str += line + '\r\n';
        }
        return str;
    },
    download_csv: function(csv_data,csv_header) {
        // var csv = 'Name,Color,Size\n';
        var csv = csv_header;
        // Create Object
        // var items = [
        //       { name: "Item 1", color: "Green", size: "X-Large" },
        //       { name: "Item 2", color: "Green", size: "X-Large" },
        //       { name: "Item 3", color: "Green", size: "X-Large" }];
        // Convert Object to JSON
        // var jsonObject = JSON.stringify(csv_data);
        // Convert JSON to CSV & Display CSV
        // csv+= this.ConvertToCSV(jsonObject);
        var csv_array=[csv_data];
        // console.log(csv_data);
        csv+= this.ConvertToCSV(csv_array);
        console.log(csv);
        var hiddenElement = document.createElement('a');
        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);
        hiddenElement.target = '_blank';
        hiddenElement.download = 'statistics_result.csv';
        hiddenElement.click();
    }
});
