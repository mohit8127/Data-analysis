/*
 * File: app/view/ProcessTimeSeries.js
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('istsos.view.ProcessTimeSeries', {
    extend: 'istsos.view.ui.ProcessTimeSeries',
    alias: 'widget.viewerpanel1',

    initComponent: function() {
        console.log('This is Time Series Page');
        var me = this;
        me.callParent(arguments);

        this.pchoose = Ext.getCmp('pchoose');
        this.chartpanel = Ext.getCmp('chartpanel');
        this.chartpanel1=Ext.getCmp('chartpanelmethod');

        this.pchoose.on("procedureAdded",function(procedure) {
            this.chartpanel.addProcedure(procedure);
            console.log('this procedure add and plot in graph HELLO WORLD');
            // console.log(procedure);
        },this);
        
        this.pchoose.on("procedureRemoved",function(procedure) {
            this.chartpanel.removeProcedure(procedure);
        },this);
        
        // this.chartpanel.on('observedPropertyIsSet',function(chartpanel, observedProperty){
        //     console.log(observedProperty);
        //     console.log(chartpanel);
        // },this);
        
        // g= new Dygraph(
        //     document.getElementById('chartpanelmethod-body'),
        //     "Date,Temperature\n" +
        //     "2008-05-07,15\n" +
        //     "2008-05-08,20\n" +
        //     "2008-05-09,40\n"
        // );


        // this.chartpanel.on("clickCallback",function(panel, e, x, pts) {
        //     this.updateGridSelection([x]);
        //     panel.highlightRegion(x);
        // },this.grideditor);
        
        
        // this.chartpanel.on("seriesSelected",function(panel, e, x, y, pts) {
        //     this.updateGridSelection([x,y]);
        //     panel.highlightRegion(x,y);
        // },this.grideditor);


        // Ext.getCmp('pchoose').on("serviceSelected",function(service) {
        //     this.fit2service(service);
        //     console.log('service selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // Ext.getCmp('pchoose').on("offeringSelected",function(offering) {
        //     this.fit2offering(offering);
        //     console.log('offering selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // Ext.getCmp('pchoose').on("procedureSelected",function(procedure) {
        //     this.fit2procedure(procedure);
        //     console.log('procedure selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // // Ext.getCmp('proceduremap').on("procedureSelected",function(service, offering, procedure) {
        // //     this._addProcedure(service, offering, procedure);
        // // },Ext.getCmp('pchoose'));

        // Ext.getCmp('pchoose').on("procedureAdded",function(procedure) {
        //     this['chart'].addProcedure(procedure);
        //     // this['map'].add2highlight(procedure);
        //     // this['map'].fit2offering();
        // },{
        //   chart: Ext.getCmp('chartpanel')
        //   // map: Ext.getCmp('proceduremap')
        // });

        // Ext.getCmp('pchoose').on("procedureRemoved",function(procedure) {
        // // this['map'].removeHighlight(procedure);
        // this['chart'].removeProcedure(procedure);
        // // this['grid'].removeProcedure(procedure);
        // },{
        //   chart: Ext.getCmp('chartpanel'),
        //   // map: Ext.getCmp('proceduremap'),
        //   // grid: Ext.getCmp('gridpanel')
        // });

        // Ext.getCmp('chartpanel').on("queueLoaded",function(chartpanel) {
        //     this.initReadOnlyGrid(
        //         chartpanel.procedures,
        //         Ext.getCmp("oeCbObservedProperty").getValue());
        // }
        // // ,Ext.getCmp("gridpanel")
        // );

        // Ext.getCmp('chartpanel').on("clickCallback",function(panel, e, x, pts) {
        //     this.updateGridSelection([x]);
        //     panel.highlightRegion(x);
        // }
        // // ,Ext.getCmp('gridpanel')
        // );
        // var dygraphs = {};
        // dygraphs['chartpanel'] = new Dygraph(
        // Ext.getCmp('chartpanel123');
        // g= new Dygraph(
        //     // containing div
        //     Ext.getCmp('chartpanel123'),
        //     // CSV or path to a CSV file.
        //     "Date,Temperature\n" +
        //     "2008-05-07,15\n" +
        //     "2008-05-08,20\n" +
        //     "2008-05-09,40\n"
        // );

        /*Ext.getCmp('gridpanel').on("select",function(panel, grid, record, index, eOpts) {
            console.log("select:");
            console.dir(arguments);
        },Ext.getCmp('chartpanel'));*/

        // Ext.getCmp('gridpanel').on("selectionchange",function(panel, grid, selected, eOpts) {
        //
        //     if (selected.length==1) {
        //         //this.addAnnotation(selected[0].get('micro'));
        //         this.highlightRegion(selected[0].get('micro'));
        //     }else if (selected.length>1) {
        //         var rec, begin, end;
        //         rec = selected[0];
        //         begin = rec.get('micro');
        //         rec = selected[selected.length-1];
        //         end = rec.get('micro');
        //         this.highlightRegion(begin,end);
        //     }else if (selected.length==0) {
        //         this.highlightRegion();
        //         this.removeAnnotations();
        //     }
        // },Ext.getCmp('chartpanel'));




        Ext.getCmp("methodsCombox").select(2);
        Ext.getCmp("methodsCombox").on("select",function(combo, records, eOpts){

            var value = combo.getValue();
            console.log(value);
            console.log('in the combox');

            var digital_filter = Ext.getCmp('digitalPanel');
            var exeedance = Ext.getCmp('exeedancePanel');
            var resample = Ext.getCmp('resamplePanel');
            var integrate = Ext.getCmp('integratePanel');

            switch (value) {
                case 0:
                    digital_filter.setVisible(true);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                  break;
                case 1:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(true);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                  break;
                case 2:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(true);
                    integrate.setVisible(false);
                  break;
                case 3:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(true);
                  break;
                case 4:
                    digital_filter.setVisible(true);
                    exeedance.setVisible(true);
                    resample.setVisible(true);
                    integrate.setVisible(true);
                  break;
                case 5:
                    console.log('dygraph is running');
                    break;
                case 6:
                    break;
                case 7:
                    break;
                case 8:
                    break;
                case 9:
                    break;
                case 10:
                    break;
                case 11:
                    break;
            }
        });

        Ext.getCmp("buttonExecute").on("click",function(btn, e, eOpts){

            var methods=Ext.getCmp("methodsCombox").getValue();
            console.log(methods);
            if(methods==2){
                // console.log('BUTTON EXECUTE CLICKED'); 
                var frequency=Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods=Ext.getCmp("comboxSmapling").getValue();
                var Limit=Ext.getCmp("comboxLimit").getValue();
                var Quality=Ext.getCmp("comboxHowquality").getValue();
                console.log(frequency+"  "+timeSeriesMethods+"   "+Limit+" "+Quality);
            }
        },this);
        Ext.getCmp("buttonSave").on("click",function(btn, e, eOpts){

            console.log('BUTTON SAVE CLICKED');
        },this);
        Ext.getCmp("checkboxOverwrite").on("click",function(btn, e, eOpts){

            console.log('checkboxOverwrite');
        },this);

        /*Ext.getCmp('chartpanel').on("underlayCallback",function(panel, e, x, pts) {
            console.log("underlayCallback:");
            console.dir(arguments);
        });*/
    }

});
