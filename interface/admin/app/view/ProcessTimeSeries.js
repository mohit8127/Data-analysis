/*
 * File: app/view/ProcessTimeSeries.js
 *
 * This file was generated by Ext Designer version 1.2.3.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('istsos.view.ProcessTimeSeries', {
    extend: 'istsos.view.ui.ProcessTimeSeries',
    alias: 'widget.viewerpanel1',
    mixins: {
        dataAccess: 'istsos.view.ProcedureChart'
    },
    initComponent: function() {
        var me = this;
        me.callParent(arguments);

        this.pchoose = Ext.getCmp('pchoose');
        this.chartpanel = Ext.getCmp('chartpanel');
        this.serieschartpanel = Ext.getCmp('serieschartpanel');

        // this.chartpanel1=Ext.getCmp('chartpanelmethod');
        // timeSeriesGraph=Ext.getCmp('timeSeriesGraph');
        

        var methodpanel=Ext.getCmp('methodstabs');
        var methodserch=Ext.getCmp('buttonExecute');
        methodserch.disable();
        methodpanel.disable();

        this.pchoose.on("procedureAdded",function(procedure) {
            this.chartpanel.addProcedure(procedure);
            methodserch.enable();
            methodpanel.enable();
        },this);
        
        this.pchoose.on("procedureRemoved",function(procedure) {
            this.chartpanel.removeProcedure(procedure);
        },this);
        
        // this.chartpanel.on('observedPropertyIsSet',function(chartpanel, observedProperty){
        //     console.log(observedProperty);
        //     console.log(chartpanel);
        // },this);
        
        // g= new Dygraph(
        //     document.getElementById('chartpanelmethod-body'),
        //     "Date,Temperature\n" +
        //     "2008-05-07,15\n" +
        //     "2008-05-08,20\n" +
        //     "2008-05-09,40\n"
        // );


        // this.chartpanel.on("clickCallback",function(panel, e, x, pts) {
        //     this.updateGridSelection([x]);
        //     panel.highlightRegion(x);
        // },this.grideditor);
        
        
        // this.chartpanel.on("seriesSelected",function(panel, e, x, y, pts) {
        //     this.updateGridSelection([x,y]);
        //     panel.highlightRegion(x,y);
        // },this.grideditor);


        // Ext.getCmp('pchoose').on("serviceSelected",function(service) {
        //     this.fit2service(service);
        //     console.log('service selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // Ext.getCmp('pchoose').on("offeringSelected",function(offering) {
        //     this.fit2offering(offering);
        //     console.log('offering selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // Ext.getCmp('pchoose').on("procedureSelected",function(procedure) {
        //     this.fit2procedure(procedure);
        //     console.log('procedure selected method');
        // }
        // // ,Ext.getCmp('proceduremap')
        // );

        // // Ext.getCmp('proceduremap').on("procedureSelected",function(service, offering, procedure) {
        // //     this._addProcedure(service, offering, procedure);
        // // },Ext.getCmp('pchoose'));

        // Ext.getCmp('pchoose').on("procedureAdded",function(procedure) {
        //     this['chart'].addProcedure(procedure);
        //     // this['map'].add2highlight(procedure);
        //     // this['map'].fit2offering();
        // },{
        //   chart: Ext.getCmp('chartpanel')
        //   // map: Ext.getCmp('proceduremap')
        // });

        // Ext.getCmp('pchoose').on("procedureRemoved",function(procedure) {
        // // this['map'].removeHighlight(procedure);
        // this['chart'].removeProcedure(procedure);
        // // this['grid'].removeProcedure(procedure);
        // },{
        //   chart: Ext.getCmp('chartpanel'),
        //   // map: Ext.getCmp('proceduremap'),
        //   // grid: Ext.getCmp('gridpanel')
        // });

        // Ext.getCmp('chartpanel').on("queueLoaded",function(chartpanel) {
        //     this.initReadOnlyGrid(
        //         chartpanel.procedures,
        //         Ext.getCmp("oeCbObservedProperty").getValue());
        // }
        // // ,Ext.getCmp("gridpanel")
        // );

        // Ext.getCmp('chartpanel').on("clickCallback",function(panel, e, x, pts) {
        //     this.updateGridSelection([x]);
        //     panel.highlightRegion(x);
        // }
        // // ,Ext.getCmp('gridpanel')
        // );
        // var dygraphs = {};
        // dygraphs['chartpanel'] = new Dygraph(
        // Ext.getCmp('chartpanel123');
        
        
        // document.getElementById("chartCntt-body"),
        // console.log(Ext.getCmp("chartCntt"));

        // this.g= new Dygraph(
        //     Ext.get("chartCntt-body"),
        //     "Date,Temperature\n" +
        //     "2008-05-07,15\n" +
        //     "2008-05-08,20\n" +
        //     "2008-05-09,40\n"
        // );


        /*Ext.getCmp('gridpanel').on("select",function(panel, grid, record, index, eOpts) {
            console.log("select:");
            console.dir(arguments);
        },Ext.getCmp('chartpanel'));*/

        // Ext.getCmp('gridpanel').on("selectionchange",function(panel, grid, selected, eOpts) {
        //
        //     if (selected.length==1) {
        //         //this.addAnnotation(selected[0].get('micro'));
        //         this.highlightRegion(selected[0].get('micro'));
        //     }else if (selected.length>1) {
        //         var rec, begin, end;
        //         rec = selected[0];
        //         begin = rec.get('micro');
        //         rec = selected[selected.length-1];
        //         end = rec.get('micro');
        //         this.highlightRegion(begin,end);
        //     }else if (selected.length==0) {
        //         this.highlightRegion();
        //         this.removeAnnotations();
        //     }
        // },Ext.getCmp('chartpanel'));




        Ext.getCmp("methodsCombox").select(0);
        Ext.getCmp("methodsCombox").on("select",function(combo, records, eOpts){

            var value = combo.getValue();
            console.log(value);
            console.log('in the combox');

            var digital_filter = Ext.getCmp('digitalPanel');
            var exeedance = Ext.getCmp('exeedancePanel');
            var resample = Ext.getCmp('resamplePanel');
            var integrate = Ext.getCmp('integratePanel');
            var regularization = Ext.getCmp('regularizationPanel');

            switch (value) {
                case 0:
                    digital_filter.setVisible(true);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                  break;
                case 1:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(true);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                  break;
                case 2:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(true);
                    integrate.setVisible(false);
                    regularization.setVisible(false);
                  break;
                case 3:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(true);
                    regularization.setVisible(false);
                  break;
                case 4:
                    digital_filter.setVisible(true);
                    exeedance.setVisible(true);
                    resample.setVisible(true);
                    integrate.setVisible(true);
                    regularization.setVisible(false);
                  break;
                case 5:
                    console.log('dygraph is running');
                    break;
                case 6:
                    digital_filter.setVisible(false);
                    exeedance.setVisible(false);
                    resample.setVisible(false);
                    integrate.setVisible(false);
                    regularization.setVisible(true);
                    break;
                case 7:
                    break;
                case 8:
                    break;
                case 9:
                    break;
                case 10:
                    break;
                case 11:
                    break;
            }
        });

        Ext.getCmp("buttonExecute").on("click",function(btn, e, eOpts){

            var methods=Ext.getCmp("methodsCombox").getValue();
            console.log(methods);
            console.log('METHOD IS NOT RUNNING');
            if (methods == 2)
            {
                var resdata=this.dataAccess();
                var resdata1=resdata[0];
                var resdata2=resdata[1];
                // console.log(resdata1);
                // console.log(resdata2);
                var frequency= Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods= Ext.getCmp("comboxSmapling").getValue();
                var fillCombox= Ext.getCmp("comboxFill").getValue();
                var Limit= Ext.getCmp("comboxLimit").getValue();
                var Quality= Ext.getCmp("comboxHowquality").getValue();
                var textHistory=Ext.getCmp('textAreaHistory');
                // istsos.view.ProcessTimeSeries.dataAccess();

                console.log(frequency+"  "+timeSeriesMethods+"   "+fillCombox+"    "+Limit+" "+Quality);
                textHistory.setValue("frequency: "+frequency+"  How: "+timeSeriesMethods+"  fill: "+fillCombox+"  Limit: "+Limit+"  Quality: "+Quality);
                Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/resample', wa.url),
                    scope: this,
                    method:"POST",
                    jsonData:{
                        "freq":frequency,
                        "sampling":timeSeriesMethods,
                        "fill":fillCombox,
                        "limit":Limit,
                        "Quality":Quality,
                        "index1": resdata1,
                        "values1": resdata2
                        // "seriesdata":data
                    },
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        // for (var i = 0; i < json1.data.length; i++) {
                        // }
                                // console.log(json1.data);
                                // console.log(JSON.parse(json1.data));
                                var test=JSON.parse(json1.data);
                                // for(var i=0;i<test.length;i++){

                                // }
                                var x=Object.keys(test['value']);
                                var y=Object.values(test['value']);
                                console.log(x,y);
                                this.chartdata = [];
                                for (var i = 0; i < x.length; i++) {
                                    var rec = [];
                                    rec.push(parseInt(x[i]));
                                    var vals = y[i];
                                    rec = rec.concat(vals);
                                    this.chartdata.push(rec);
                                }
                                this.rederChart1(this.chartdata);
                                console.log(this.chartdata);
                        // var jsonResp = Ext.util.JSON.decode(response.responseText);
                        // Ext.Msg.alert("Info","UserName from Server : "+jsonResp.username);
                        // console.log(json1);
                    },
                    failure: function (response) {
                        var jsonResp = Ext.util.JSON.decode(response.responseText);
                        Ext.Msg.alert("Error",jsonResp.error);
                    }
                });
            }
            if(methods==6){
                // console.log('BUTTON EXECUTE CLICKED'); 
                var frequency= Ext.getCmp("edittextFrequency").getValue();
                var timeSeriesMethods= Ext.getCmp("comboxSmapling").getValue();
                var fillCombox= Ext.getCmp("comboxFill").getValue();
                var Limit= Ext.getCmp("comboxLimit").getValue();
                var Quality= Ext.getCmp("comboxHowquality").getValue();
                    Ext.Ajax.request({
                    url: Ext.String.format('{0}/istsos/operations/oat/regularization', wa.url),
                    scope: this,
                    method: "GET",
                    success: function(response){
                        var json1 = Ext.decode(response.responseText);
                        console.log('REQUEST OF DATA FROM to TO ALL PROPERTY');
                        console.log('this success response');
                        var text1 = response.responseText;
                        console.log(json1);
                    },
                    failure: function (response) {
                        console.log('this failure response');
                      // var jsonResp = Ext.util.JSON.decode(response.responseText);
                      // Ext.Msg.alert("Error",jsonResp.error);
                        var text2 = response.responseText;
                        console.log(text2);
                        }
                    });
                }
        },this);

        Ext.getCmp("buttonSave").on("click",function(btn, e, eOpts){

            console.log('BUTTON SAVE CLICKED');
        },this);
        Ext.getCmp("checkboxOverwrite").on("click",function(btn, e, eOpts){

            console.log('checkboxOverwrite');
        },this);

        /*Ext.getCmp('chartpanel').on("underlayCallback",function(panel, e, x, pts) {
            console.log("underlayCallback:");
            console.dir(arguments);
        });*/
    },
    rederChart1: function(chartdata){
            this.chartdata=chartdata;
            // this.obsprop = Ext.getCmp("oeCbObservedProperty").getValue();
            // var procs = [];
            // get the json rapresentation of the tree menu of procedures
            //var checked = Ext.getCmp('proceduresTree').getValues();
            var visibility = []; // Initialize the chart series visibility

            this.labels = ["isodate"];
            this.colors = [];
            var template = [];

            var valueFormatter = {

            }

            var initChart = true;
            if (initChart) {
                this.chart = new Dygraph(
                    document.getElementById("chartSeries-body"),
                    this.chartdata,
                    {
                        strokeWidth: 2,
                        digitsAfterDecimal: 6,
                        connectSeparatedPoints: true,
                        //visibility: visibility,
                        legend: 'always',
                        showRangeSelector: true,
                        showRoller: true,
                        rangeSelectorHeight: 30,
                        rangeSelectorPlotStrokeColor: 'black',
                        rangeSelectorPlotFillColor: 'green',
                        labelsDivStyles: {
                            'padding': '4px',
                            'border': '1px solid black',
                            'borderRadius': '3px',
                            'boxShadow': '4px 4px 4px #888',
                            'right': '10px'
                        },
                        labelsDivWidth: "100%",
                        axisLineColor: 'green',
                        axisLabelFontSize: 12,
                        axisLabelWidth: 150,
                        xAxisLabelWidth: 150,
                        highlightCircleSize: 4,
                        axes: Ext.apply({
                            x: {
                                valueFormatter: function(ms) {
                                    return istsos.utils.micro2iso(ms,istsos.utils.tzToMinutes(Ext.getCmp('oeTZ').getValue()));
                                },
                                axisLabelFormatter: function(ms, gran, b, chart){

                                    // Get unix time in seconds
                                    var unix = parseInt(ms/1000000);
                                    // Extract microseconds only
                                    var micro = ms-(unix*1000000);
                                    // Date object without considering microseconds
                                    var date = Ext.Date.parse(unix,'U');

                                    var range = chart.xAxisRange();
                                    var delta = range[1]-range[0];

                                    var clip = function(m){
                                        return (parseFloat('0.'+m)+"").substring(1);
                                    }
                                    if (delta<500000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==200000 || micro==400000 || micro==600000 || micro==800000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if (delta<1000000) { // less then a seconds range
                                        if (micro == 0) {
                                            if (date.getHours()==0
                                                && date.getMinutes()==0
                                                && date.getSeconds()==0) {
                                                return Ext.Date.format(date,'Y-m-d');
                                            }else{
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }
                                        }else{
                                            if (micro==500000) {
                                                return Ext.Date.format(date,'H:i:s')+clip(micro);
                                            }else{
                                                return micro/1000;
                                            }
                                        }
                                    }else if(delta<1000000*60) { // less the a minute
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i:s')+clip(micro);
                                        }
                                    }else if(delta<1000000*60*60) { // less the an hour
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d') + "T" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else if(delta<1000000*60*60*24*4) { // less the a day
                                        if (date.getHours()==0
                                            && date.getMinutes()==0
                                            && date.getSeconds()==0) {
                                            return Ext.Date.format(date,'Y-m-d');
                                        }else if (date.getHours()==12) {
                                            return Ext.Date.format(date,'Y-m-d') + "<br>" +
                                            Ext.Date.format(date,'H:i');
                                        }else{
                                            return Ext.Date.format(date,'H:i');
                                        }
                                    }else  { // less the a day
                                        return Ext.Date.format(date,'Y-m-d');
                                    }

                                }
                            }
                        },valueFormatter),
                        clickCallback: function(e, x, pts) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            // Series selectd
                            if (e.shiftKey && chartpanel.lastClick) {
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("seriesSelected", this, e, x, this.lastClick, pts);
                                }, chartpanel, [e, x, pts]);

                            }else{ // Single point selected
                                chartpanel.lastClick = x;
                                Ext.callback(function(e, x, pts){
                                    this.fireEvent("clickCallback", this, e, x, pts);
                                }, chartpanel, [e, x, pts]);
                            }

                        },
                        pointClickCallback: function(e, p) {

                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(e, p){
                                this.fireEvent("clickCallback", this, e, p['xval']);
                            }, chartpanel, [e, p]);
                        },
                        underlayCallback: function(canvas, area, g) {
                            var chartpanel = Ext.getCmp('serieschartpanel');
                            Ext.callback(function(canvas, area, g){
                                this.fireEvent("underlayCallback", this, canvas, area, g);
                            }, chartpanel, [canvas, area, g]);
                        }
                    }
                    );
            }else if (!Ext.isEmpty(this.chart)) {
                this.chart.updateOptions({
                    file: this.chartdata,
                    visibility: visibility,
                    labels: this.labels
                });
            }
            Ext.get('chartSeries-body').removeCls("viewerChart");
            Ext.get('chartSeries').unmask();
        }
});
